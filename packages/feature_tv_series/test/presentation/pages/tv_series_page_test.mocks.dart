// Mocks generated by Mockito 5.4.6 from annotations
// in feature_tv_series/test/presentation/pages/tv_series_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:feature_tv_series/domain/usecases/get_now_playing_tv_series.dart'
    as _i2;
import 'package:feature_tv_series/domain/usecases/get_popular_tv_series.dart'
    as _i4;
import 'package:feature_tv_series/domain/usecases/get_top_rated_tv_series.dart'
    as _i6;
import 'package:feature_tv_series/presentaion/cubit/now_playing/now_playing_tv_series_cubit.dart'
    as _i8;
import 'package:feature_tv_series/presentaion/cubit/now_playing/now_playing_tv_series_state.dart'
    as _i3;
import 'package:feature_tv_series/presentaion/cubit/popular/popular_tv_series_cubit.dart'
    as _i11;
import 'package:feature_tv_series/presentaion/cubit/popular/popular_tv_series_state.dart'
    as _i5;
import 'package:feature_tv_series/presentaion/cubit/top_rated/top_rated_tv_series_cubit.dart'
    as _i12;
import 'package:feature_tv_series/presentaion/cubit/top_rated/top_rated_tv_series_state.dart'
    as _i7;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNowPlayingTvSeriesUseCase_0 extends _i1.SmartFake
    implements _i2.GetNowPlayingTvSeriesUseCase {
  _FakeGetNowPlayingTvSeriesUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeNowPlayingTvSeriesState_1 extends _i1.SmartFake
    implements _i3.NowPlayingTvSeriesState {
  _FakeNowPlayingTvSeriesState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetPopularTvSeriesUseCase_2 extends _i1.SmartFake
    implements _i4.GetPopularTvSeriesUseCase {
  _FakeGetPopularTvSeriesUseCase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePopularTvSeriesState_3 extends _i1.SmartFake
    implements _i5.PopularTvSeriesState {
  _FakePopularTvSeriesState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetTopRatedTvSeriesUseCase_4 extends _i1.SmartFake
    implements _i6.GetTopRatedTvSeriesUseCase {
  _FakeGetTopRatedTvSeriesUseCase_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTopRatedTvSeriesState_5 extends _i1.SmartFake
    implements _i7.TopRatedTvSeriesState {
  _FakeTopRatedTvSeriesState_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NowPlayingTvSeriesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNowPlayingTvSeriesCubit extends _i1.Mock
    implements _i8.NowPlayingTvSeriesCubit {
  MockNowPlayingTvSeriesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingTvSeriesUseCase get getNowPlaying =>
      (super.noSuchMethod(
            Invocation.getter(#getNowPlaying),
            returnValue: _FakeGetNowPlayingTvSeriesUseCase_0(
              this,
              Invocation.getter(#getNowPlaying),
            ),
          )
          as _i2.GetNowPlayingTvSeriesUseCase);

  @override
  _i3.NowPlayingTvSeriesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeNowPlayingTvSeriesState_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.NowPlayingTvSeriesState);

  @override
  _i9.Stream<_i3.NowPlayingTvSeriesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i9.Stream<_i3.NowPlayingTvSeriesState>.empty(),
          )
          as _i9.Stream<_i3.NowPlayingTvSeriesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i9.Future<void> fetchNowPlayingTvSeries() =>
      (super.noSuchMethod(
            Invocation.method(#fetchNowPlayingTvSeries, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void emit(_i3.NowPlayingTvSeriesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i10.Change<_i3.NowPlayingTvSeriesState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [PopularTvSeriesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularTvSeriesCubit extends _i1.Mock
    implements _i11.PopularTvSeriesCubit {
  MockPopularTvSeriesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetPopularTvSeriesUseCase get getPopular =>
      (super.noSuchMethod(
            Invocation.getter(#getPopular),
            returnValue: _FakeGetPopularTvSeriesUseCase_2(
              this,
              Invocation.getter(#getPopular),
            ),
          )
          as _i4.GetPopularTvSeriesUseCase);

  @override
  _i5.PopularTvSeriesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePopularTvSeriesState_3(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i5.PopularTvSeriesState);

  @override
  _i9.Stream<_i5.PopularTvSeriesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i9.Stream<_i5.PopularTvSeriesState>.empty(),
          )
          as _i9.Stream<_i5.PopularTvSeriesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i9.Future<void> fetchPopularTvSeries() =>
      (super.noSuchMethod(
            Invocation.method(#fetchPopularTvSeries, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void emit(_i5.PopularTvSeriesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i10.Change<_i5.PopularTvSeriesState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [TopRatedTvSeriesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopRatedTvSeriesCubit extends _i1.Mock
    implements _i12.TopRatedTvSeriesCubit {
  MockTopRatedTvSeriesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetTopRatedTvSeriesUseCase get getTopRatedTvSeries =>
      (super.noSuchMethod(
            Invocation.getter(#getTopRatedTvSeries),
            returnValue: _FakeGetTopRatedTvSeriesUseCase_4(
              this,
              Invocation.getter(#getTopRatedTvSeries),
            ),
          )
          as _i6.GetTopRatedTvSeriesUseCase);

  @override
  _i7.TopRatedTvSeriesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTopRatedTvSeriesState_5(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i7.TopRatedTvSeriesState);

  @override
  _i9.Stream<_i7.TopRatedTvSeriesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i9.Stream<_i7.TopRatedTvSeriesState>.empty(),
          )
          as _i9.Stream<_i7.TopRatedTvSeriesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i9.Future<void> fetchTopRatedTvSeries() =>
      (super.noSuchMethod(
            Invocation.method(#fetchTopRatedTvSeries, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void emit(_i7.TopRatedTvSeriesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i10.Change<_i7.TopRatedTvSeriesState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}
